"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = applyDecs;
function old_createMetadataMethodsForProperty(metadataMap, kind, property, decoratorFinishedRef) {
  return {
    getMetadata: function (key) {
      old_assertNotFinished(decoratorFinishedRef, "getMetadata");
      old_assertMetadataKey(key);
      var metadataForKey = metadataMap[key];
      if (metadataForKey === void 0) return void 0;
      if (kind === 1) {
        var pub = metadataForKey.public;
        if (pub !== void 0) {
          return pub[property];
        }
      } else if (kind === 2) {
        var priv = metadataForKey.private;
        if (priv !== void 0) {
          return priv.get(property);
        }
      } else if (Object.hasOwnProperty.call(metadataForKey, "constructor")) {
        return metadataForKey.constructor;
      }
    },
    setMetadata: function (key, value) {
      old_assertNotFinished(decoratorFinishedRef, "setMetadata");
      old_assertMetadataKey(key);
      var metadataForKey = metadataMap[key];
      if (metadataForKey === void 0) {
        metadataForKey = metadataMap[key] = {};
      }
      if (kind === 1) {
        var pub = metadataForKey.public;
        if (pub === void 0) {
          pub = metadataForKey.public = {};
        }
        pub[property] = value;
      } else if (kind === 2) {
        var priv = metadataForKey.priv;
        if (priv === void 0) {
          priv = metadataForKey.private = new Map();
        }
        priv.set(property, value);
      } else {
        metadataForKey.constructor = value;
      }
    }
  };
}
function old_convertMetadataMapToFinal(obj, metadataMap) {
  var parentMetadataMap = obj[Symbol.metadata || Symbol.for("Symbol.metadata")];
  var metadataKeys = Object.getOwnPropertySymbols(metadataMap);
  if (metadataKeys.length === 0) return;
  for (var i = 0; i < metadataKeys.length; i++) {
    var key = metadataKeys[i];
    var metaForKey = metadataMap[key];
    var parentMetaForKey = parentMetadataMap ? parentMetadataMap[key] : null;
    var pub = metaForKey.public;
    var parentPub = parentMetaForKey ? parentMetaForKey.public : null;
    if (pub && parentPub) {
      Object.setPrototypeOf(pub, parentPub);
    }
    var priv = meta